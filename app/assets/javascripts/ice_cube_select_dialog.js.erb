(function() {
  var IceCubeSelectDialog,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.IceCubeSelectDialog = IceCubeSelectDialog = (function() {
    function IceCubeSelectDialog(_at_ice_cube_selector) {
      this.ice_cube_selector = _at_ice_cube_selector;
      this.weekOfMonthChanged = __bind(this.weekOfMonthChanged, this);
      this.dateOfMonthChanged = __bind(this.dateOfMonthChanged, this);
      this.daysChanged = __bind(this.daysChanged, this);
      this.intervalChanged = __bind(this.intervalChanged, this);
      this.freqChanged = __bind(this.freqChanged, this);
      this.toggle_month_view = __bind(this.toggle_month_view, this);
      this.init_calendar_weeks = __bind(this.init_calendar_weeks, this);
      this.init_calendar_days = __bind(this.init_calendar_days, this);
      this.summaryFetchSuccess = __bind(this.summaryFetchSuccess, this);
      this.summaryUpdate = __bind(this.summaryUpdate, this);
      this.save = __bind(this.save, this);
      this.outerCancel = __bind(this.outerCancel, this);
      this.cancel = __bind(this.cancel, this);
      this.positionDialogVert = __bind(this.positionDialogVert, this);
      this.current_rule = this.ice_cube_selector.ice_cube_select('current_rule');
      this.initDialogBox();
      if ((this.current_rule.hash == null) || (this.current_rule.hash.rule_type == null)) {
        this.freqChanged();
      } else {
        setTimeout(this.positionDialogVert, 10);
      }
    }

    IceCubeSelectDialog.prototype.initDialogBox = function() {
      var open_in;
      $(".ice_cube_select_dialog_holder").remove();
      open_in = $("body");
      if ($(".ui-page-active").length) {
        open_in = $(".ui-page-active");
      }
      open_in.append(this.template());
      this.outer_holder = $(".ice_cube_select_dialog_holder");
      this.inner_holder = this.outer_holder.find(".ice_cube_select_dialog");
      this.content = this.outer_holder.find(".ice_cube_select_dialog_content");
      this.positionDialogVert(true);
      this.mainEventInit();
      this.freqInit();
      this.summaryInit();
      this.outer_holder.trigger("ice_cube_select:dialog_opened");
      return this.freq_select.focus();
    };

    IceCubeSelectDialog.prototype.ordinal_suffix_of = function(i) {
      var j, k;
      j = i % 10;
      k = i % 100;
      if (j === 1 && k !== 11) {
        return i + 'st';
      }
      if (j === 2 && k !== 12) {
        return i + 'nd';
      }
      if (j === 3 && k !== 13) {
        return i + 'rd';
      }
      return i + 'th';
    };

    IceCubeSelectDialog.prototype.full_string_weekday = function(num) {
      var weekday;
      weekday = new Array(7);
      weekday[0] = 'Sunday';
      weekday[1] = 'Monday';
      weekday[2] = 'Tuesday';
      weekday[3] = 'Wednesday';
      weekday[4] = 'Thursday';
      weekday[5] = 'Friday';
      weekday[6] = 'Saturday';
      return weekday[num];
    };

    IceCubeSelectDialog.prototype.positionDialogVert = function(initial_positioning) {
      var dialog_height, margin_top, new_style_hash, window_height, window_width;
      window_height = $(window).height();
      window_width = $(window).width();
      dialog_height = this.content.outerHeight();
      if (dialog_height < 80) {
        dialog_height = 80;
      }
      margin_top = (window_height - dialog_height) / 2 - 30;
      if (margin_top < 10) {
        margin_top = 10;
      }
      new_style_hash = {
        "margin-top": margin_top + "px",
        "min-height": dialog_height + "px"
      };
      if (initial_positioning != null) {
        this.inner_holder.css(new_style_hash);
        return this.inner_holder.trigger("ice_cube_select:dialog_positioned");
      } else {
        this.inner_holder.addClass("animated");
        return this.inner_holder.animate(new_style_hash, 200, (function(_this) {
          return function() {
            _this.inner_holder.removeClass("animated");
            _this.content.css({
              "width": "auto"
            });
            return _this.inner_holder.trigger("ice_cube_select:dialog_positioned");
          };
        })(this));
      }
    };

    IceCubeSelectDialog.prototype.cancel = function() {
      this.outer_holder.remove();
      return this.ice_cube_selector.ice_cube_select('cancel');
    };

    IceCubeSelectDialog.prototype.outerCancel = function(event) {
      if ($(event.target).hasClass("ice_cube_select_dialog_holder")) {
        return this.cancel();
      }
    };

    IceCubeSelectDialog.prototype.save = function() {
      if (this.current_rule.str == null) {
        return;
      }
      this.outer_holder.remove();
      return this.ice_cube_selector.ice_cube_select('save', this.current_rule);
    };

    IceCubeSelectDialog.prototype.mainEventInit = function() {
      this.outer_holder.on('click tap', this.outerCancel);
      this.content.on('click tap', 'h4 a', this.cancel);
      this.save_button = this.content.find('input.ice_cube_select_save').on("click tap", this.save);
      return this.content.find('input.ice_cube_select_cancel').on("click tap", this.cancel);
    };

    IceCubeSelectDialog.prototype.freqInit = function() {
      var rule_type;
      this.freq_select = this.outer_holder.find(".ice_cube_select_frequency");
      if ((this.current_rule.hash != null) && ((rule_type = this.current_rule.hash.rule_type) != null)) {
        if (rule_type.search(/Weekly/) !== -1) {
          this.freq_select.prop('selectedIndex', 1);
          this.initWeeklyOptions();
        } else if (rule_type.search(/Monthly/) !== -1) {
          this.freq_select.prop('selectedIndex', 2);
          this.initMonthlyOptions();
        } else if (rule_type.search(/Yearly/) !== -1) {
          this.freq_select.prop('selectedIndex', 3);
          this.initYearlyOptions();
        } else {
          this.initDailyOptions();
        }
      }
      return this.freq_select.on("change", this.freqChanged);
    };

    IceCubeSelectDialog.prototype.initDailyOptions = function() {
      var interval_input, section;
      section = this.content.find('.daily_options');
      interval_input = section.find('.ice_cube_select_daily_interval');
      interval_input.val(this.current_rule.hash.interval);
      interval_input.on("change keyup", this.intervalChanged);
      return section.show();
    };

    IceCubeSelectDialog.prototype.initWeeklyOptions = function() {
      var interval_input, section;
      section = this.content.find('.weekly_options');
      interval_input = section.find('.ice_cube_select_weekly_interval');
      interval_input.val(this.current_rule.hash.interval);
      interval_input.on("change keyup", this.intervalChanged);
      section.find(".day_holder a").each(function(index, element) {
        return $(element).removeClass("selected");
      });
      if ((this.current_rule.hash.validations != null) && (this.current_rule.hash.validations.day != null)) {
        $(this.current_rule.hash.validations.day).each(function(index, val) {
          return section.find(".day_holder a[data-value='" + val + "']").addClass("selected");
        });
      }
      section.off('click', '.day_holder a').on("click", ".day_holder a", this.daysChanged);
      return section.show();
    };

    IceCubeSelectDialog.prototype.initMonthlyOptions = function() {
      var in_week_mode, interval_input, section, _base, _base1, _base2;
      section = this.content.find('.monthly_options');
      interval_input = section.find('.ice_cube_select_monthly_interval');
      interval_input.val(this.current_rule.hash.interval);
      interval_input.on("change keyup", this.intervalChanged);
      (_base = this.current_rule.hash).validations || (_base.validations = {});
      (_base1 = this.current_rule.hash.validations).day_of_month || (_base1.day_of_month = []);
      (_base2 = this.current_rule.hash.validations).day_of_week || (_base2.day_of_week = {});
      this.init_calendar_days(section);
      this.init_calendar_weeks(section);
      in_week_mode = Object.keys(this.current_rule.hash.validations.day_of_week).length > 0;
      section.find(".monthly_rule_type_week").prop("checked", in_week_mode);
      section.find(".monthly_rule_type_day").prop("checked", !in_week_mode);
      this.toggle_month_view();
      section.find("input[name=monthly_rule_type]").on("change", this.toggle_month_view);
      return section.show();
    };

    IceCubeSelectDialog.prototype.initYearlyOptions = function() {
      var interval_input, section;
      section = this.content.find('.yearly_options');
      interval_input = section.find('.ice_cube_select_yearly_interval');
      interval_input.val(this.current_rule.hash.interval);
      interval_input.on("change keyup", this.intervalChanged);
      return section.show();
    };

    IceCubeSelectDialog.prototype.summaryInit = function() {
      this.summary = this.outer_holder.find(".ice_cube_select_summary");
      return this.summaryUpdate();
    };

    IceCubeSelectDialog.prototype.summaryUpdate = function(new_string) {
      var rule_str;
      this.summary.width(this.content.width());
      if ((this.current_rule.hash != null) && (this.current_rule.str != null)) {
        this.summary.removeClass("fetching");
        this.save_button.removeClass("disabled");
        rule_str = this.current_rule.str.replace("*", "");
        if (rule_str.length < 20) {
          rule_str = ($.fn.ice_cube_select.texts["summary"] + ": ") + rule_str;
        }
        return this.summary.find("span").html(rule_str);
      } else {
        this.summary.addClass("fetching");
        this.save_button.addClass("disabled");
        this.summary.find("span").html("");
        return this.summaryFetch();
      }
    };

    IceCubeSelectDialog.prototype.summaryFetch = function() {
      var rule_type;
      if (!((this.current_rule.hash != null) && ((rule_type = this.current_rule.hash.rule_type) != null))) {
        return;
      }
      this.current_rule.hash['week_start'] = $.fn.ice_cube_select.texts["first_day_of_week"];
      return $.ajax({
        url: "<%= Rails.application.config.action_controller.relative_url_root %>/ice_cube_select/translate/" + $.fn.ice_cube_select.texts["locale_iso_code"],
        type: "POST",
        data: this.current_rule.hash,
        success: this.summaryFetchSuccess
      });
    };

    IceCubeSelectDialog.prototype.summaryFetchSuccess = function(data) {
      this.current_rule.str = data;
      this.summaryUpdate();
      return this.content.css({
        "width": "auto"
      });
    };

    IceCubeSelectDialog.prototype.init_calendar_days = function(section) {
      var day_link, end_of_month_link, monthly_calendar, num, _i;
      monthly_calendar = section.find(".ice_cube_select_calendar_day");
      monthly_calendar.html("");
      for (num = _i = 1; _i <= 31; num = ++_i) {
        monthly_calendar.append((day_link = $(document.createElement("a")).text(num)));
        day_link.addClass("a_day")
        day_link.attr('aria-label', ordinal_suffix_of(num) + ' Day of Month' );
        if ($.inArray(num, this.current_rule.hash.validations.day_of_month) !== -1) {
          day_link.addClass("selected");
        }
      }
      monthly_calendar.append((end_of_month_link = $(document.createElement("a")).text($.fn.ice_cube_select.texts["last_day"])));
      end_of_month_link.addClass("end_of_month");
      end_of_month_link.attr('aria-label', ' Last Day of Month' );
      if ($.inArray(-1, this.current_rule.hash.validations.day_of_month) !== -1) {
        end_of_month_link.addClass("selected");
      }
      monthly_calendar.find("a").on("click tap", this.dateOfMonthChanged);
      return monthly_calendar.find("a").attr('href','');
    };

    IceCubeSelectDialog.prototype.init_calendar_weeks = function(section) {
      var cell_str, day_link, day_of_week, index, monthly_calendar, num, row_labels, show_row, _i, _j, _len, _ref, _ref1, _ref2;
      monthly_calendar = section.find(".ice_cube_select_calendar_week");
      monthly_calendar.html("");
      row_labels = $.fn.ice_cube_select.texts["order"];
      show_row = $.fn.ice_cube_select.options["monthly"]["show_week"];
      cell_str = $.fn.ice_cube_select.texts["days_first_letter"];
      _ref = [1, 2, 3, 4, 5, -1];
      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
        num = _ref[index];
        if (show_row[index]) {
          monthly_calendar.append("<span>" + row_labels[num - 1] + "</span>");
          for (day_of_week = _j = _ref1 = $.fn.ice_cube_select.texts["first_day_of_week"], _ref2 = 7 + $.fn.ice_cube_select.texts["first_day_of_week"]; _ref1 <= _ref2 ? _j < _ref2 : _j > _ref2; day_of_week = _ref1 <= _ref2 ? ++_j : --_j) {
            day_of_week = day_of_week % 7;
            day_link = $("<a>", {
              text: cell_str[day_of_week]
            });
            day_link.attr('href','');
            day_link.attr('aria-label', ordinal_suffix_of(num) + ' ' + full_string_weekday(day_of_week) );
            day_link.attr("day", day_of_week);
            day_link.attr("instance", num);
            monthly_calendar.append(day_link);
          }
        }
      }
      $.each(this.current_rule.hash.validations.day_of_week, function(key, value) {
        return $.each(value, function(index, instance) {
          return section.find("a[day='" + key + "'][instance='" + instance + "']").addClass("selected");
        });
      });
      return monthly_calendar.find("a").on("click tap", this.weekOfMonthChanged);
    };

    IceCubeSelectDialog.prototype.toggle_month_view = function() {
      var week_mode;
      week_mode = this.content.find(".monthly_rule_type_week").prop("checked");
      this.content.find(".ice_cube_select_calendar_week").toggle(week_mode);
      return this.content.find(".ice_cube_select_calendar_day").toggle(!week_mode);
    };

    IceCubeSelectDialog.prototype.freqChanged = function() {
      var _base;
      if (!$.isPlainObject(this.current_rule.hash)) {
        this.current_rule.hash = null;
      }
      (_base = this.current_rule).hash || (_base.hash = {});
      this.current_rule.hash.interval = 1;
      this.current_rule.hash.until = null;
      this.current_rule.hash.count = null;
      this.current_rule.hash.validations = null;
      this.content.find(".freq_option_section").hide();
      this.content.find("input[type=radio], input[type=checkbox]").prop("checked", false);
      switch (this.freq_select.val()) {
        case "Weekly":
          this.current_rule.hash.rule_type = "IceCube::WeeklyRule";
          this.current_rule.str = $.fn.ice_cube_select.texts["weekly"];
          this.initWeeklyOptions();
          break;
        case "Monthly":
          this.current_rule.hash.rule_type = "IceCube::MonthlyRule";
          this.current_rule.str = $.fn.ice_cube_select.texts["monthly"];
          this.initMonthlyOptions();
          break;
        case "Yearly":
          this.current_rule.hash.rule_type = "IceCube::YearlyRule";
          this.current_rule.str = $.fn.ice_cube_select.texts["yearly"];
          this.initYearlyOptions();
          break;
        default:
          this.current_rule.hash.rule_type = "IceCube::DailyRule";
          this.current_rule.str = $.fn.ice_cube_select.texts["daily"];
          this.initDailyOptions();
      }
      this.summaryUpdate();
      return this.positionDialogVert();
    };

    IceCubeSelectDialog.prototype.intervalChanged = function(event) {
      var _base;
      this.current_rule.str = null;
      (_base = this.current_rule).hash || (_base.hash = {});
      this.current_rule.hash.interval = parseInt($(event.currentTarget).val());
      if (this.current_rule.hash.interval < 1 || isNaN(this.current_rule.hash.interval)) {
        this.current_rule.hash.interval = 1;
      }
      return this.summaryUpdate();
    };

    IceCubeSelectDialog.prototype.daysChanged = function(event) {
      var raw_days, _base;
      $(event.currentTarget).toggleClass("selected");
      this.current_rule.str = null;
      (_base = this.current_rule).hash || (_base.hash = {});
      this.current_rule.hash.validations = {};
      raw_days = this.content.find(".day_holder a.selected").map(function() {
        return parseInt($(this).data("value"));
      });
      this.current_rule.hash.validations.day = raw_days.get();
      this.summaryUpdate();
      return false;
    };

    IceCubeSelectDialog.prototype.dateOfMonthChanged = function(event) {
      var raw_days, _base;
      $(event.currentTarget).toggleClass("selected");
      this.current_rule.str = null;
      (_base = this.current_rule).hash || (_base.hash = {});
      this.current_rule.hash.validations = {};
      raw_days = this.content.find(".monthly_options .ice_cube_select_calendar_day a.selected").map(function() {
        var res;
        res = $(this).text() === $.fn.ice_cube_select.texts["last_day"] ? -1 : parseInt($(this).text());
        return res;
      });
      this.current_rule.hash.validations.day_of_week = {};
      this.current_rule.hash.validations.day_of_month = raw_days.get();
      this.summaryUpdate();
      return false;
    };

    IceCubeSelectDialog.prototype.weekOfMonthChanged = function(event) {
      var _base;
      $(event.currentTarget).toggleClass("selected");
      this.current_rule.str = null;
      (_base = this.current_rule).hash || (_base.hash = {});
      this.current_rule.hash.validations = {};
      this.current_rule.hash.validations.day_of_month = [];
      this.current_rule.hash.validations.day_of_week = {};
      this.content.find(".monthly_options .ice_cube_select_calendar_week a.selected").each((function(_this) {
        return function(index, elm) {
          var day, instance, _base1;
          day = parseInt($(elm).attr("day"));
          instance = parseInt($(elm).attr("instance"));
          (_base1 = _this.current_rule.hash.validations.day_of_week)[day] || (_base1[day] = []);
          return _this.current_rule.hash.validations.day_of_week[day].push(instance);
        };
      })(this));
      this.summaryUpdate();
      return false;
    };

    IceCubeSelectDialog.prototype.template = function() {
      var day_of_week, str, _i, _ref, _ref1;
      str = "<div id='ice_cube_select_modal' class='ice_cube_select_dialog_holder'> <div class='ice_cube_select_dialog'> <div class='ice_cube_select_dialog_content'> <h4>" + $.fn.ice_cube_select.texts["repeat"] + " <a href='#' id='ice_cube_select_cancel_button" title='" + $.fn.ice_cube_select.texts["cancel"] + "' Alt='" + $.fn.ice_cube_select.texts["cancel"] + "'></a> </h4> <p class='frequency-select-wrapper'> <label for='ice_cube_select_frequency'>" + $.fn.ice_cube_select.texts["frequency"] + ":</label> <select data-wrapper-class='ui-recurring-select' id='ice_cube_select_frequency' class='ice_cube_select_frequency' name='ice_cube_select_frequency'> <option value='Daily'>" + $.fn.ice_cube_select.texts["daily"] + "</option> <option value='Weekly'>" + $.fn.ice_cube_select.texts["weekly"] + "</option> <option value='Monthly'>" + $.fn.ice_cube_select.texts["monthly"] + "</option> <option value='Yearly'>" + $.fn.ice_cube_select.texts["yearly"] + "</option> </select> </p> <div class='daily_options freq_option_section'> <p> " + $.fn.ice_cube_select.texts["every"] + " <input type='text' data-wrapper-class='ui-recurring-select' name='ice_cube_select_daily_interval' class='ice_cube_select_daily_interval ice_cube_select_interval' value='1' size='2' title='Enter number of days to repeat' /> " + $.fn.ice_cube_select.texts["days"] + " </p> </div> <div class='weekly_options freq_option_section'> <p> " + $.fn.ice_cube_select.texts["every"] + " <input type='text' data-wrapper-class='ui-recurring-select' name='ice_cube_select_weekly_interval' class='ice_cube_select_weekly_interval ice_cube_select_interval' value='1' size='2' title='Enter number of weeks to repeat' /> " + $.fn.ice_cube_select.texts["weeks_on"] + ": </p> <div class='day_holder'>";
      for (day_of_week = _i = _ref = $.fn.ice_cube_select.texts["first_day_of_week"], _ref1 = 7 + $.fn.ice_cube_select.texts["first_day_of_week"]; _ref <= _ref1 ? _i < _ref1 : _i > _ref1; day_of_week = _ref <= _ref1 ? ++_i : --_i) {
        day_of_week = day_of_week % 7;
        str += "<a href='#' data-value='" + day_of_week + "'>" + $.fn.ice_cube_select.texts["days_first_letter"][day_of_week] + "</a>";
      }
      return str += "</div> <span style='clear:both; visibility:hidden; height:1px;'>.</span> </div> <div class='monthly_options freq_option_section'> <p> " + $.fn.ice_cube_select.texts["every"] + " <input type='text' data-wrapper-class='ui-recurring-select' name='ice_cube_select_monthly_interval' class='ice_cube_select_monthly_interval ice_cube_select_interval' value='1' size='2' title='Enter number of months to repeat' /> " + $.fn.ice_cube_select.texts["months"] + ": </p> <p class='monthly_rule_type'> <span><label for='monthly_rule_type_day'>" + $.fn.ice_cube_select.texts["day_of_month"] + "</label><input type='radio' class='monthly_rule_type_day' name='monthly_rule_type' id='monthly_rule_type_day' value='true' /></span> <span><label for='monthly_rule_type_week'>" + $.fn.ice_cube_select.texts["day_of_week"] + "</label><input type='radio' class='monthly_rule_type_week' name='monthly_rule_type' id='monthly_rule_type_week' value='true' /></span> </p> <p class='ice_cube_select_calendar_day'></p> <p class='ice_cube_select_calendar_week'></p> </div> <div class='yearly_options freq_option_section'> <p> " + $.fn.ice_cube_select.texts["every"] + " <input type='text' data-wrapper-class='ui-recurring-select' name='ice_cube_select_yearly_interval' class='ice_cube_select_yearly_interval ice_cube_select_interval' value='1' size='2' title='Enter number of years to repeat' /> " + $.fn.ice_cube_select.texts["years"] + " </p> </div> <p class='ice_cube_select_summary'> <span></span> </p> <div class='controls'> <input type='button' data-wrapper-class='ui-recurring-select' id='ice_cube_select_save' class='ice_cube_select_save' value='" + $.fn.ice_cube_select.texts["ok"] + "' /> <input type='button' data-wrapper-class='ui-recurring-select' id='ice_cube_select_cancel' class='ice_cube_select_cancel' value='" + $.fn.ice_cube_select.texts["cancel"] + "' /> </div> </div> </div> </div>";
    };

    return IceCubeSelectDialog;

  })();

}).call(this);
